#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <vector>
#include <random>
#include <algorithm>

#define ll long long

using namespace std;
const double time_limit = 4.8 / 10.0;
// while (clock() < ll(double(time_limit) * double(CLOCKS_PER_SEC)))
// {
// }
vector<vector<ll>> node = {
    {0},
    {0},
    {1, 0},
    {5, 4, 8, 7},
    {52, 39, 62, 45, 49, 48, 21, 18, 63, 8, 64},
    {1, 931, 988, 95, 520, 75, 720, 902, 700, 724, 712, 530, 699, 465, 926, 980, 257, 547, 97, 676, 121, 580, 1019, 891, 19, 495, 127, 0, 234, 621, 1023},
    {27428, 25483, 1940, 23859, 16454, 13797, 5804, 4133, 31139, 29731, 28356, 24831, 1664, 9828, 18204, 18486, 20179, 21064, 17715, 21502, 12055, 28396, 7207, 31145, 19848, 4080, 11793, 9970, 19771, 23009, 31319, 7639, 25152, 28641, 27729, 4380, 2400, 23582, 2382, 32617, 26967, 25154, 10015, 16937, 27698, 7103, 29017, 30992, 32710, 20616, 16529, 18832, 32670, 27999, 21513, 4384, 22094, 6995, 26936, 17610, 32493, 29900, 10783, 13334, 2080, 3071, 22946, 27988, 4255, 199, 4075, 23968, 18077, 30719, 31739, 11707, 12895, 8531, 12292, 11040, 2061, 13280, 21455, 5646, 4352, 1426, 20334, 24799, 27391, 21640, 20876, 23371, 32740, 32768, 32698, 1104, 24559, 256, 137, 24445},
    {1012458, 486748, 916976, 759715, 550878, 598978, 1455615, 1606210, 306071, 2029617, 2091660, 1480529, 1522402, 1515718, 343755, 1516812, 1011867, 1285007, 1603802, 1131885, 762826, 1810167, 468932, 164378, 70432, 1372219, 17043, 543603, 593190, 694556, 891793, 1184561, 245681, 1845524, 710184, 2032870, 782957, 731710, 1538585, 1091461, 492955, 573963, 1668790, 1717524, 688932, 120383, 1719488, 1076761, 568489, 236822, 34872, 445526, 1728570, 354415, 510998, 595734, 19044, 582551, 13975, 1799413, 64731, 353072, 1689538, 1265801, 507807, 1738705, 32723, 2029656, 672228, 866167, 2030969, 1441215, 1268702, 1730953, 694334, 1109106, 1856379, 158975, 1515158, 1544592, 21609, 373064, 1546702, 1287605, 1815613, 692957, 1743968, 718848, 230887, 65578, 1823753, 224333, 1829182, 2082681, 464355, 1435517, 1865219, 1728579, 1643363, 1153448},
    {205254527, 132871785, 219471453, 216300211, 63959653, 245194171, 91261229, 103638456, 194456109, 128461157, 106029899, 225347795, 55334404, 24339359, 130677366, 231532254, 38440727, 82128112, 202461930, 238993198, 10741036, 59057535, 135643622, 162214525, 14562286, 157345373, 221830045, 582605, 185663717, 258163269, 69234192, 90138657, 157039593, 226011536, 7369091, 68830889, 109906073, 181920253, 158611949, 120850728, 45724305, 191548850, 134130595, 11205607, 106966200, 195463786, 123187537, 213291809, 10595166, 84742308, 75987814, 129397472, 195436347, 41775761, 165729586, 178276946, 24073100, 181043087, 39622528, 100036948, 247966492, 175544676, 240708063, 179701461, 126690390, 171707332, 253876068, 194961060, 141671800, 14949054, 15394552, 232768734, 44962875, 131427756, 174443348, 30845802, 168316650, 114856539, 219659131, 224259647, 143487761, 102010264, 265827647, 94943432, 217556096, 159732409, 109821833, 146456836, 9276934, 23903890, 107711890, 111605408, 99774193, 176493616, 140048228, 102292663, 101275138, 1480083, 266944693, 159858167},
    {42213649061, 50842103909, 27078539888, 2329008014, 29925535206, 54181033936, 46838724617, 45320795814, 41632679743, 61411115488, 196024486, 40119623607, 53667325799, 4555857881, 17530808354, 5179489649, 60347286236, 3188500660, 62308484038, 19344052069, 49136643831, 2388889501, 52961142790, 11576234990, 49353815983, 55461888204, 33067544699, 3339788242, 51325988216, 62270101710, 57723813047, 35002924348, 20780647646, 3168855112, 29428248901, 19805782529, 14538274026, 387367926, 38689398275, 37528153123, 60628384895, 60235341089, 25651097122, 11494150954, 54441585912, 27263302537, 20655408631, 63221720789, 17598996872, 60962262730, 68605191633, 66558728892, 41261957951, 55810361444, 20874741299, 40468219320, 2242854631, 58774265404, 31431737418, 16466803878, 36152287337, 12719427798, 4640933561, 61027694657, 54849950306, 45506442253, 33442510895, 7660652077, 49182661013, 6756604868, 27361616409, 62664143585, 13738886150, 42167138726, 48543139950, 18654851571, 40320428689, 50818491470, 36531077930, 16834013653, 15027148431, 35188351358, 45878964536, 11020555006, 62032248931, 13004442261, 26957830016, 13634715690, 62812763359, 67419466521, 21548516064, 56824268281, 11061961632, 10007654654, 40419203669, 37475040785, 60572191992, 1629469887, 5006061263, 6150974431},
    {702917369376, 31262791631811, 29089264186658, 14456312662664, 21837677806796, 5673884772053, 8688141167695, 2465268882570, 29593040022522, 13279460768683, 1938757164195, 13923564324543, 18767902825208, 9054626023816, 28600042768131, 22195171046191, 727345796346, 3210754959874, 22017022377642, 24014271733109, 20009515853949, 12917395706576, 31765556696378, 27953809229732, 1555652280012, 6222394015906, 3342289722847, 21643063642283, 6022600677819, 21323470632353, 3456733044570, 28594781442901, 2816421232305, 18918671785019, 23918793238677, 18072340991407, 12170875209395, 12037592834244, 9183474011920, 5838579824868, 1127673718504, 11966583106092, 31403519200470, 12617574734239, 16816752174854, 5285954947675, 7375345264500, 12611224616939, 16166586113266, 16710354696372, 24447732279080, 20099250897060, 9284629796785, 303958761384, 35095694974035, 33160293032186, 19639352942464, 12185843785700, 10954474120074, 16615245201365, 15928758554407, 22137887648866, 28147008092855, 19311949227768, 29238483776256, 20132447823008, 14277291659743, 11082608487570, 33324873360265, 8263632336860, 27527720415109, 17838442409634, 24826169089359, 15151847473396, 29742468902629, 5619289891269, 27065390581382, 25734420233704, 2177649222578, 27204149725141, 26467179578358, 23231678542324, 17197560198164, 32392595128997, 12668827512517, 25732203665236, 23970432017429, 33193815016009, 16431590378025, 25940995479936, 19480904990921, 13932545445928, 21501625651499, 227533133258, 4686339525317, 34722936961331, 849269672148, 28451236992266, 19815038375164, 16759017405650},
    {4595215060513245, 23080601576428154, 8409583134519188, 17548455535721017, 20905363478076671, 5659903537201789, 34177790713333741, 8506718554325320, 10624732804948927, 1339209526046453, 8059172961110334, 12361726495984340, 21398398349326163, 33688896157359961, 28696022485184323, 5589845923470698, 8771964858157962, 21579696965160950, 14896553694873689, 7941680949778597, 8787957248964126, 27377775067220320, 27841141936154104, 5387821227692416, 35355752076068684, 9481767627811801, 27036188148632359, 6810343956899737, 15062663850560072, 10868445367575445, 3310412516309661, 2600228092141858, 3290838523415743, 10229627910630864, 12615319039545914, 28753143299370990, 28512479390106566, 98594648851142, 21857333126717930, 2338073348498505, 26442048336201390, 17614233082604213, 25692669006955695, 4024146156779900, 11027173478610741, 1163785836338698, 33197815457405535, 19603821842745397, 26142112560911844, 9496160283593278, 9533781297479717, 16729970026426461, 17752313155652273, 30730137135466032, 24918549553016380, 12447246076055149, 32163360008655461, 33121014081428318, 30901334770228849, 4522383858382606, 8312057631961074, 8504132504943476, 15109542595986600, 15860016045824276, 30943936062648375, 7471672545488243, 1024777732901153, 30080346211728499, 13365173677261589, 30804809033727787, 27476552643518381, 25061610645180164, 24307824301585263, 34029044612688259, 31020746373214836, 4814923090827682, 5069179532542350, 35737091095320188, 23006066234777771, 24905974554841332, 33976701018983412, 10121949369784823, 10411978806922168, 16154524587079839, 7662685933356188, 4922117920041544, 31863234832070820, 26093199946377871, 29548575139426720, 8911257080939647, 2930572929218126, 23223080488163718, 7999411891533000, 859795002888039, 14921836246068439, 13953375500718175, 31925437250437106, 29921292184110847, 22619570047853963, 15267174635055126},
};
vector<vector<ll>> Nemap = {{0},
                            {0},
                            {0},
                            {0},
                            {0},
                            {0},
                            {0},
                            {0},
                            {0},
                            {0},
                            {1, 1, 1, 1, 3, 3, 3, 5, 5, 9, 9, 11, 13, 13, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 3, 5, 5, 5, 5, 5, 7, 13, 13, 13, 13, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 3, 3, 3, 5, 11, 5, 7, 7, 7, 3, 3, 5, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 5, 5, 5, 9, 5, 5, 11, 13, 11, 9, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 5, 5, 7, 7, 7, 7, 7, 11, 11, 9, 11, 15, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 15, 15, 9, 15, 9, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 3, 5, 7, 7, 7, 5, 11, 9, 9, 9, 3, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 5, 5, 7, 7, 5, 5, 5, 5, 15, 7, 7, 1, 5, 5, 5, 5, 3, 3, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 9, 9, 9, 7, 13, 15, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 5, 9, 5, 13, 5, 9, 3, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 5, 7, 7, 15, 9, 9, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 1, 3, 3, 5, 7, 9, 11, 15, 11, 11, 5, 7, 11, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 5, 5, 7, 11, 15, 11, 11, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 3, 5, 5, 9, 9, 11, 11, 15, 11, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 5, 7, 9, 13, 13, 13, 9, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 7, 7, 13, 11, 13, 13, 13, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 5, 5, 11, 11, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 3, 5, 5, 5, 5, 11, 11, 15, 11, 11, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 1, 3, 5, 3, 7, 7, 7, 13, 13, 15, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 5, 5, 5, 5, 11, 9, 15, 13, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 9, 9, 13, 7, 13, 15, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 7, 7, 13, 13, 15, 15, 13, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 7, 13, 13, 11, 15, 15, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 11, 11, 11, 11, 13, 5, 5, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 9, 9, 11, 15, 13, 15, 15, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 5, 5, 15, 9, 15, 11, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 5, 9, 9, 15, 15, 11, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 7, 7, 11, 11, 11, 13, 13, 3, 1, 3, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 7, 13, 13, 13, 13, 13, 15, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 5, 5, 11, 9, 11, 15, 13, 13, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 7, 9, 13, 13, 13, 15, 15, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 5, 5, 5, 15, 15, 15, 11, 13, 15, 5, 5, 5, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 5, 7, 9, 13, 13, 15, 13, 15, 13, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 3, 5, 5, 9, 11, 15, 15, 13, 13, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 9, 9, 9, 13, 11, 15, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 5, 5, 7, 15, 9, 13, 15, 13, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 11, 11, 11, 15, 13, 11, 15, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 9, 7, 7, 11, 11, 13, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 9, 9, 9, 13, 13, 15, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 9, 13, 13, 13, 13, 15, 15, 5, 5, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 5, 7, 7, 7, 13, 13, 13, 13, 7, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 7, 7, 9, 13, 15, 13, 11, 11, 15, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 11, 9, 15, 9, 13, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 7, 7, 11, 13, 13, 15, 15, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 7, 15, 13, 15, 15, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 9, 7, 7, 15, 15, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 7, 13, 9, 15, 13, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 7, 9, 11, 15, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 13, 13, 13, 15, 15, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 7, 11, 11, 11, 15, 11, 13, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 7, 11, 7, 11, 11, 13, 13, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 15, 15, 13, 15, 11, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 5, 5, 7, 9, 11, 11, 15, 15, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 9, 11, 11, 7, 9, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 11, 13, 13, 9, 9, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 11, 11, 11, 13, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 11, 11, 15, 13, 15, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 5, 11, 15, 15, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 7, 9, 9, 13, 13, 13, 15, 15, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 5, 7, 9, 15, 15, 11, 11, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 7, 15, 9, 9, 15, 7, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 7, 7, 9, 11, 15, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 7, 7, 11, 13, 11, 11, 9, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 7, 11, 11, 13, 13, 13, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 9, 13, 13, 15, 15, 13, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 7, 7, 9, 9, 15, 15, 13, 15, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 9, 11, 13, 13, 15, 15, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 9, 9, 15, 15, 15, 15, 9, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 5, 9, 11, 13, 13, 13, 11, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 5, 5, 5, 7, 13, 13, 13, 11, 15, 15, 9, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 5, 5, 9, 15, 13, 15, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 5, 7, 11, 15, 15, 15, 11, 13, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 9, 9, 15, 13, 13, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 5, 11, 13, 13, 13, 13, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 7, 7, 11, 13, 13, 13, 9, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 5, 5, 11, 11, 13, 15, 15, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 7, 7, 11, 11, 15, 15, 13, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 9, 13, 13, 13, 15, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 5, 9, 9, 15, 11, 13, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 7, 13, 13, 15, 13, 15, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 7, 7, 9, 9, 9, 11, 13, 13, 11, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 9, 11, 7, 11, 11, 15, 15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 7, 9, 11, 9, 15, 15, 13, 15, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 13, 15, 13, 11, 11, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 3, 7, 7, 15, 9, 11, 11, 11, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 3, 5, 5, 7, 13, 15, 13, 13, 15, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 3, 3, 5, 5, 7, 9, 9, 13, 15, 11, 13, 15, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {1, 1, 3, 3, 5, 5, 7, 11, 13, 13, 15, 15, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                            {0}};

void print_vector(vector<ll> v)
{
  for (ll i = 0; i < v.size(); i++)
  {
    cerr << v.at(i) << (v.size() - 1 == i ? '\n' : ' ');
  }
}
int main(int argc, char const *argv[])
{
  random_device rd;
  mt19937 eng(137);
  uniform_int_distribution<ll> d500(0, 1000000000);

  ll M;
  double e;
  cin >> M >> e;
  ll Margin = 3;
  if (e < 0.001)
    Margin = 1;
  else if (e < 0.04)
    Margin = 3;
  else if (e < 0.05)
    Margin = 5;
  else if (e < 0.10)
    Margin = 7;
  else if (e < 0.13)
    Margin = 9;
  else if (e < 0.0)
    Margin = 11;
  else if (e < 0.0)
    Margin = 13;
  else
    Margin = 15;
  if (M > 80 && e > 0.1)
    Margin = 1;
  if (M > 60 && e > 0.25)
    Margin = 1;
  Margin = Nemap.at(M).at(int(e * 100.0));
  if (argc >= 2)
  {
    Margin = stoi(string(argv[1]));
  }
  ll N = 6;
  for (ll i = 0; i < 10; i++)
  {
    if (node.at(i).size() >= M)
    {
      N = i;
      break;
    }
  }
  ll NN2 = (N * Margin) * ((N * Margin) - 1) / 2;

  vector<pair<ll, ll>> vs(N * (N - 1) / 2);
  vector<pair<ll, ll>> vs2(NN2);
  vector<vector<ll>> edge_count(NN2 + 1);
  vector<vector<ll>> node_size_list(M);

  ll counter = 0;
  for (ll i = 0; i < N; i++)
  {
    for (ll j = 0; j < N; j++)
    {
      if (i < j)
      {
        vs.at(counter) = make_pair(i, j);
        counter++;
      }
    }
  }
  counter = 0;
  for (ll i = 0; i < N * Margin; i++)
  {
    for (ll j = 0; j < N * Margin; j++)
    {
      if (i < j)
      {
        vs2.at(counter) = make_pair(i, j);
        counter++;
      }
    }
  }

  cout << N * Margin << endl;
  for (ll i = 0; i < M; i++)
  {
    vector<ll> edge_count_list(N * Margin, 0);
    vector<ll> v(N * Margin, 0);
    vector<vector<ll>> m(N * Margin, vector<ll>(N * Margin, 0));
    for (ll j = 0; j < N * (N - 1) / 2; j++)
      if ((node.at(N).at(i) >> j) & 1)
      {
        for (ll ii = 0; ii < Margin; ii++)
          for (ll jj = 0; jj < Margin; jj++)
          {
            edge_count_list.at(vs.at(j).first * Margin + ii)++;
            edge_count_list.at(vs.at(j).second * Margin + jj)++;
            m.at(vs.at(j).first * Margin + ii).at(vs.at(j).second * Margin + jj) = 1;
            m.at(vs.at(j).second * Margin + jj).at(vs.at(j).first * Margin + ii) = 1;
          }
      }
    for (ll j = 0; j < N * Margin; j++)
    {
      for (ll k = j + 1; k < N * Margin; k++)
      {
        cout << m.at(j).at(k);
      }
    }
    cout << endl;
    // for (ll j = 0; j < N * Margin; j++)
    // {
    //   v.at(edge_count_list.at(j))++;
    // }
    sort(edge_count_list.begin(), edge_count_list.end());

    node_size_list.at(i) = edge_count_list;
    // cerr << i << '\t';
    // print_vector(edge_count_list);
  }

  for (ll i = 0; i < 100; i++)
  {
    string S;
    cin >> S;
    ll ans = 0;
    vector<ll> edge_count_list(N * Margin, 0);
    vector<ll> v(N * Margin, 0);
    for (ll j = 0; j < NN2; j++)
    {
      if (S.at(j) == '1')
      {
        edge_count_list.at(vs2.at(j).first)++;
        edge_count_list.at(vs2.at(j).second)++;
      }
    }
    // for (ll j = 0; j < N * Margin; j++)
    // {
    //   v.at(min(
    //       (edge_count_list.at(j) + Margin / 2) / Margin * Margin,
    //       N * Margin - 1))++;
    // }
    ll best_diff = 100000;
    sort(edge_count_list.begin(), edge_count_list.end());
    for (ll j = 0; j < M; j++)
    {
      ll diff = 0;
      for (ll k = 0; k < edge_count_list.size(); k++)
      {
        diff += abs(edge_count_list.at(k) - node_size_list.at(j).at(k)) *
                abs(edge_count_list.at(k) - node_size_list.at(j).at(k));
      }
      if (diff < best_diff)
      {
        ans = j;
        best_diff = diff;
      }
      // cerr << j << '\t' << diff << endl;
    }
    // print_vector(edge_count_list);
    cout << min(ans, M - 1) << endl;
  }
  return 0;
}
